
一、递归思维要点
1、不要人肉进行递归（最大误区），初学者可以在纸上画出递归的状态树，慢慢熟练之后一定要抛弃这样的习惯。一定要记住：直接看函数本身开始写即可。否则，永远没办法掌握、熟练使用递归。
2、找到最近最简的方法，将其拆解成可重复解决的问题（找最近重复子问题）。原因是我们写的程序的指令，只包括 if else 、 for 和 while loop、递归调用。
3、数学归纳法的思维，最开始最简单的条件是成立的，比如n=1,n=2的时候是成立的，且第二点你能证明当n成立的时候，可以推导出n+1也成立的。

4、碰到一个题目，就会找到他的重复性：
  （1）最优重复性：动态规划；
  （2）最近重复性：根据重复性的构造和分解，便有分治和回溯。

二、递归模板
public void recur(int level, int param) {
  // 1.递归终结条件（最先写）
  if (level > MAX_LEVEL) {
    // process result
    return;
  }

  // 2.处理当前层逻辑
  process(level, param);

  // 3.下探到下一层
  recur( level: level + 1, newParam);

  // 4.清理恢复当前层
  revertStates();
}


三、分治模板
public void recur(int level, int param) {
  // 1.递归终结条件（最先写）
  if (level > MAX_LEVEL) {
    // process result
    return;
  }

  // 2.处理当前层逻辑
  process(level, param);

  // 3.调用函数下探到下一层，解决更细节的子问题
  int subresult1 = recur( level: level + 1, newParam);
  int subresult2 = recur( level: level + 1, newParam);
  int subresult3 = recur( level: level + 1, newParam);

  // 4.将子问题的解的合并，产生最终结果
  int result = processResult(subresult1, subresult2, subresult3, …);

  // 5.清理恢复当前层
  revertStates();
}






























