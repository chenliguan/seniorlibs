
一、什么是数据结构？数据元素相互之间一种或者多种关系的表示。

1、存储分为：数组（顺序存储）和链表（链式存储）
(1)数组和链表才是「结构基础」，其他多样化的数据结构，究其源头，都是在链表或者数组上的特殊操作，API 不同而已。

(2)数组
由于是紧凑连续存储，可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。
但正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度是 O(N)；
而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。

(3)链表
因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；
如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。
但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。

2、逻辑分为：集合结构、线性结构、树形结构、图形结构

二、数据结构的基本操作
1、对于任何数据结构，其基本操作无非 遍历 + 访问，再具体一点就是：增删查改。
数据结构种类很多，但它们存在的目的都是：在不同的应用场景，尽可能高效地增删查改。

2、如何遍历 + 访问？从最高层来看，无非两种形式：线性的和非线性的。线性就是 for/while 迭代为代表，非线性就是 递归为代表。再具体一步，无非以下几种框架：
（1）数组遍历框架，典型的线性迭代结构：
void traverse(int[] arr) {
    for (int i = 0; i < arr.length; i++) {
        // 迭代访问 arr[i]
    }
}
（2）二叉树遍历框架，典型的非线性递归遍历结构：
class TreeNode {
    int val;
    TreeNode left, right;
}
void traverse(TreeNode root) {
    traverse(root.left);
    traverse(root.right);
}

三、什么是算法？解决问题的步骤的描述，程序=算法+数据结构。


四、算法刷题指南
1、数据结构是工具，算法是通过合适的工具解决特定问题的方法。

2、先刷二叉树，先刷二叉树，先刷二叉树！因为二叉树是最容易培养框架思维的，而且大部分算法技巧，本质上都是树的遍历问题。
3、刷完二叉树整个专题，再去做什么回溯动规分治专题，你就会发现只要涉及递归的问题，都是树的问题。
4、很多动态规划问题就是在遍历一棵树，你如果对树的遍历操作烂熟于心，起码知道怎么把思路转化成代码，也知道如何提取别人解法的核心思路。
5、再看回溯算法，回溯算法就是个 N 叉树的前后序遍历问题，没有例外

6、试着从框架上看问题，而不要纠结于细节问题。纠结细节问题，就比如纠结 i 到底应该加到 n 还是加到 n - 1，这个数组的大小到底应该开 n 还是 n + 1 ？
7、从框架上看问题，就是像我们这样基于框架进行抽取和扩展，既可以在看别人解法时快速理解核心逻辑，也有助于找到我们自己写解法时的思路方向。
8、当然，如果细节出错，你得不到正确的答案；但是只要有框架，你再错也错不到哪去，因为你的方向是对的。

五、学习链接
https://mp.weixin.qq.com/s/DS8YN7VShv0iDfcelkaEkA
https://labuladong.gitee.io/algo/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E9%AB%98%E6%95%88%E6%96%B9%E6%B3%95.html
