package com.seniorlibs.thread.waitimport com.seniorlibs.baselib.threadpool.ThreadPoolManagerimport com.seniorlibs.baselib.utils.LogUtils/** * Author: chen * Version: 1.0.0 * Date: 2021/3/18. * Mender: * Modify: * Description: wait、notify、notifyAll */object WaitTest {    private const val TAG = "WaitTest"    /**     * 模拟 wait、notify、notifyAll     */    fun testNotifyNotifyAll() {        val blocking = Blocking()        ThreadPoolManager.getIoExecutor().submit(Runnable {            LogUtils.d(TAG, "blocking.take1()：" + blocking.takeOnly("take1") + " 线程：" + Thread.currentThread().name)        })        ThreadPoolManager.getIoExecutor().submit(Runnable {            LogUtils.d(TAG, "blocking.take2()：" + blocking.takeOnly("take2") + " 线程：" + Thread.currentThread().name)        })        ThreadPoolManager.getIoExecutor().submit(Runnable {            LogUtils.d(TAG, "blocking.take3()：" + blocking.takeOnly("take3") + " 线程：" + Thread.currentThread().name)        })        ThreadPoolManager.getIoExecutor().submit(Runnable {//            blocking.notifyOnly()            blocking.notifyAllOnly()            LogUtils.d(TAG, "blocking.notifyOnly()：线程：" + Thread.currentThread().name)        })    }}