package com.seniorlibs.thread.aqs;import com.seniorlibs.baselib.threadpool.ThreadPoolManager;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;/** * Author: chen * Version: 1.0.0 * Date: 2019/9/1. * Mender: * Modify: * Description: 测试ReentrantLock */public class ReentrantLockTest {    private static final String TAG = "ReentrantLockTest";    /**     * lock()和unlock()分别是加锁和解锁操作     */    public static void lockAndUnlock() {        NormalReentrantLock l1 = new NormalReentrantLock();        ThreadPoolManager.getInstance().executeIo(() -> l1.printLog());        ThreadPoolManager.getInstance().executeIo(() -> l1.printLog());    }    public static class NormalReentrantLock {        ReentrantLock lock = new ReentrantLock();        public void printLog() {            try {                // 锁 lock.lock 必须紧跟try代码块，且unlock要放到finally第一行                lock.lock();                for (int i = 0; i < 5; i++) {                    Thread.sleep(100);                    System.out.println(TAG + " " + Thread.currentThread().getName()                            + " is printing " + i);                }            } catch (Exception e) {            } finally {                lock.unlock();            }        }        // 加锁//        ThreadPoolManager IO #1 is printing 0//        ThreadPoolManager IO #1 is printing 1//        ThreadPoolManager IO #1 is printing 2//        ThreadPoolManager IO #2 is printing 0//        ThreadPoolManager IO #2 is printing 1//        ThreadPoolManager IO #2 is printing 2        // 不加锁//        ThreadPoolManager IO #1 is printing 0//        ThreadPoolManager IO #2 is printing 0//        ThreadPoolManager IO #1 is printing 1//        ThreadPoolManager IO #2 is printing 1//        ThreadPoolManager IO #1 is printing 2//        ThreadPoolManager IO #2 is printing 2    }    /**     * fair()和unfair()分别是公平锁和非公平锁     */    public static void fairAndUnFair() {        FairReentrantLock lft = new FairReentrantLock();        ThreadPoolManager.getInstance().executeIo(lft);        ThreadPoolManager.getInstance().executeIo(lft);        ThreadPoolManager.getInstance().executeIo(lft);    }    public static class FairReentrantLock implements Runnable {        private int sharedNumber = 0;        // 创建公平锁        private static ReentrantLock lock = new ReentrantLock(true);        @Override        public void run() {            while (sharedNumber < 10) {                lock.lock();                try {                    Thread.sleep(100);                    sharedNumber++;                    System.out.println(TAG + " " + Thread.currentThread().getName()                            + " sharedNumber is：" + sharedNumber);                } catch (Exception e) {                    e.printStackTrace();                } finally {                    lock.unlock();                }            }        }        // 公平锁//        ThreadPoolManager IO #1 sharedNumber is：1//        ThreadPoolManager IO #2 sharedNumber is：2//        ThreadPoolManager IO #3 sharedNumber is：3//        ThreadPoolManager IO #1 sharedNumber is：4//        ThreadPoolManager IO #2 sharedNumber is：5//        ThreadPoolManager IO #3 sharedNumber is：6//        ThreadPoolManager IO #1 sharedNumber is：7//        ThreadPoolManager IO #2 sharedNumber is：8//        ThreadPoolManager IO #3 sharedNumber is：9//        ThreadPoolManager IO #1 sharedNumber is：10//        ThreadPoolManager IO #2 sharedNumber is：11//        ThreadPoolManager IO #3 sharedNumber is：12        // 非公平锁//        ThreadPoolManager IO #1 sharedNumber is：1//        ThreadPoolManager IO #1 sharedNumber is：2//        ThreadPoolManager IO #1 sharedNumber is：3//        ThreadPoolManager IO #1 sharedNumber is：4//        ThreadPoolManager IO #1 sharedNumber is：5//        ThreadPoolManager IO #1 sharedNumber is：6//        ThreadPoolManager IO #1 sharedNumber is：7//        ThreadPoolManager IO #1 sharedNumber is：8//        ThreadPoolManager IO #1 sharedNumber is：9//        ThreadPoolManager IO #1 sharedNumber is：10//        ThreadPoolManager IO #2 sharedNumber is：11//        ThreadPoolManager IO #3 sharedNumber is：12    }}