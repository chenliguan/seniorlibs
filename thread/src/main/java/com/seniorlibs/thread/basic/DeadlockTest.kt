package com.seniorlibs.thread.basic/** * Author: chen * Version: 1.0.0 * Date: 2020/11/28. * Mender: * Modify: * Description: 死锁 */object DeadlockTest {    private const val TAG = "DeadlockTest"    /**     * 模拟死锁     */    fun deadLockTest() {        val r1 = MustDeadLock()        val r2 = MustDeadLock()        r1.flag = 1        r2.flag = 2        val t1 = Thread(r1, "Object_blocked_1")        val t2 = Thread(r2, "Object_blocked_2")        t1.start()        t2.start()    }    /**     * 模拟死锁     */    class MustDeadLock : Runnable {        companion object {            var o1 = Any()            var o2 = Any()        }        var flag = 0        override fun run() {            println("$TAG 线程" + Thread.currentThread().name + "的flag为" + flag)            if (flag == 1) {                synchronized(o1) {                    println("$TAG 线程1获得了1把锁")                    try {                        Thread.sleep(500)                    } catch (e: Exception) {                        e.printStackTrace()                    }                    synchronized(o2) {                        println("$TAG 线程1获得了两把锁")                    }                }            }            if (flag == 2) {                synchronized(o2) {                    println("$TAG 线程2获得了1把锁")                    try {                        Thread.sleep(500)                    } catch (e: Exception) {                        e.printStackTrace()                    }                    synchronized(o1) {                        println("$TAG 线程2获得了两把锁")                    }                }            }        }    }}