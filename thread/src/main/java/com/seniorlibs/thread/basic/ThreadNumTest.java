package com.seniorlibs.thread.basic;/** * Author: chen * Version: 1.0.0 * Date: 2020/11/28. * Mender: * Modify: * Description: Java 至少会创建几个线程呢？ */public class ThreadNumTest {    private static final String TAG = "ThreadNumTest";    /**     * 至少会创建几个线程呢     */    public static void numTest() {        System.out.println("hello world");        ThreadGroup group = Thread.currentThread().getThreadGroup();        ThreadGroup topGroup = group;        while (group != null) {            topGroup = group;            group = group.getParent();        }        int nowThreads = topGroup.activeCount();        Thread[] lstThreads = new Thread[nowThreads];        topGroup.enumerate(lstThreads);        for (int i = 0; i < nowThreads; i++) {            System.out.println("线程number：" + i + " = " + lstThreads[i].getName());        }//        线程number：0 = Signal Catcher//        线程number：1 = HeapTaskDaemon//        线程number：2 = ReferenceQueueDaemon//        线程number：3 = FinalizerDaemon//        线程number：4 = FinalizerWatchdogDaemon//        线程number：5 = Profile Saver//        线程number：6 = main//        线程number：7 = Jit thread pool worker thread 0//        线程number：8 = Binder:11841_1//        线程number：9 = Binder:11841_2//        线程number：10 = Binder:11841_3//        线程number：11 = RenderThread//        线程number：12 = queued-work-looper//        线程number：13 = Binder:11841_4//        线程number：14 = Thread-4        // ???//        线程number：0 = Reference Handler // 计算对象是否可达？//        线程number：1 = Finalizer // 回收对象时触发的finalize方法？//        线程number：2 = Signal Dispatcher // 线程调度员//        线程number：3 = main//        线程number：4 = Monitor Ctrl-Break // 监控器，锁相关    }}