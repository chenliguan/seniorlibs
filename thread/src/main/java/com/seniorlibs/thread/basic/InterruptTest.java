package com.seniorlibs.thread.basic;import java.util.concurrent.TimeUnit;import static java.lang.Thread.interrupted;/** * Author: chen * Version: 1.0.0 * Date: 2020/11/28. * Mender: * Modify: * Description: 如何停止线程，interrupt 和 boolean标志位 */public class InterruptTest {    private static final String TAG = "InterruptTest";    /**     * interrupt的原生支持 -> Sleep()     */    public static void rawInterrupt() {        // 创建目标线程        Thread interruptRawThread = new Thread(() -> {            System.out.println(Thread.currentThread().getName() + " 线程正在执行...");            try {                Thread.sleep(5000);            } catch (InterruptedException e) {                e.printStackTrace();                System.out.println(Thread.currentThread().getName() + " 线程接收到中断信息，中断线程...");            }        }, "raw_interrupt");        // 启动目标线程        interruptRawThread.start();        // 中断通知        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        System.out.println("raw_interrupt 设置线程中断....");        interruptRawThread.interrupt();//        raw_interrupt 线程正在执行...//        raw_interrupt 设置线程中断....//        raw_interrupt 线程接收到中断信息，中断线程...    }    /**     * 不支持interrupt()     */    public static void unInterrupt() {        // 创建目标线程        Thread unInterruptThread = new Thread(() -> {            for (int i = 0; i < 100000; i++) {                if (i % 10000 == 0) {                    System.out.println(Thread.currentThread().getName() + " 线程正在执行... " + i);                }            }        }, "un_interrupt");        // 启动目标线程        unInterruptThread.start();        // 中断通知        System.out.println("un_interrupt 设置线程中断....");        unInterruptThread.interrupt();//        un_interrupt 设置线程中断....//        un_interrupt 线程正在执行... 0//        un_interrupt 线程正在执行... 10000//        un_interrupt 线程正在执行... 20000//        un_interrupt 线程正在执行... 30000//        un_interrupt 线程正在执行... 40000//        un_interrupt 线程正在执行... 50000//        un_interrupt 线程正在执行... 60000//        un_interrupt 线程正在执行... 70000//        un_interrupt 线程正在执行... 80000//        un_interrupt 线程正在执行... 90000    }    /**     * 支持interrupt()     */    public static void supportInterrupt() {        // 创建目标线程        Thread supInterruptThread = new Thread(() -> {            for (int i = 0; i < 100000; i++) {                System.out.println(Thread.currentThread().getName() + " 线程正在执行... " + i);                // 判断当前线程是否中断，//                if (interrupted()) {                if (Thread.currentThread().isInterrupted()) {                    System.out.println(Thread.currentThread().getName() + " 线程接收到中断信息，中断线程...");                    break;                }            }        }, "support_interrupt");        // 启动目标线程        supInterruptThread.start();        // 中断通知        System.out.println("support_interrupt 设置线程中断....");        supInterruptThread.interrupt();//        support_interrupt 设置线程中断....//        support_interrupt 线程正在执行... 0//        support_interrupt 线程接收到中断信息，中断线程...    }}