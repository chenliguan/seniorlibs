// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "common.gradle"

buildscript {
    repositories {
        mavenLocal()
        google()
        jcenter()

        maven {
            // 添加Maven的本地依赖
            url uri('./gradles/repository')
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0'

        // 格式为-->group:module:version
//        classpath 'com.seniorlibs.buildsrc:gradles:1.0.0'

//        classpath ("com.seniorlibs.systrace-plugin:systrace:1.0.3.7") { changing = true }

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

        // kotlin
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72"
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${version.kotlin_version}"
    }
}

allprojects {
    repositories {
        mavenLocal()
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


/************************************ project相关api ***************************************/

/**
 * 配置阶段开始前的监听回调
 */
this.beforeEvaluate {
    println '配置阶段开始...beforeEvaluate'
}
// 等同于 beforeEvaluate
this.gradle.beforeProject {
    println '配置阶段开始...beforeEvaluate'
}

/**
 * 配置阶段后的监听回调
 */
this.afterEvaluate {
    println '配置阶段执行完毕...afterEvaluate'
}
// 等同于 afterEvaluate
this.gradle.afterProject {
    println '配置阶段执行完毕...afterProject'
}
// gradle执行完毕后的回调
this.gradle.buildFinished {
    println '执行阶段执行结束...buildFinished'
}
/**
 > Configure project :gradles
 配置阶段开始...beforeEvaluate
 配置阶段执行完毕...afterProject

 执行阶段执行结束...buildFinished
 */


// 执行gradlew projects查看所有的project
// 在android工程中，project就好像是android中的activity类一样，所有的lib、module都是一个project
// 其中有一个根project，剩下的都是子project，每个project都有一个build.gradle文件，build.gradle文件也是project的标识
/**
 ------------------------------------------------------------
 Root project
 ------------------------------------------------------------

 Root project 'seniorlibs'
 +--- Project ':algorithm'
 +--- Project ':app'
 +--- Project ':aspectj'
 +--- Project ':baselib'
 +--- Project ':binder'
 +--- Project ':event'
 +--- Project ':gradles'
 +--- Project ':ipc'
 +--- Project ':kotlinlib'
 +--- Project ':lifecycle'
 +--- Project ':systrace'
 +--- Project ':thirdlib'
 +--- Project ':thread'
 \--- Project ':view'
 */


// 获取所有的project
def getProjects() {
    println '------------'
    println 'Root Project'
    println '------------'

    // 在根project下的build.gradle中执行gradlew projects获取所有的project，实际调用的是this.getAllprojects()
    // getAllprojects()返回所有的Project的set集合
    this.getAllprojects().eachWithIndex { Project project, int index ->
        if (index == 0) {
            println "Root protject :'${project.name}'"
        } else {
            println "+--- project '${project.name}'"
        }
    }
}
// 调用方法
getProjects()
/**
 ------------
 Root Project
 ------------
 Root protject :'seniorlibs'
 +--- project 'algorithm'
 +--- project 'app'
 +--- project 'aspectj'
 +--- project 'baselib'
 +--- project 'binder'
 +--- project 'event'
 +--- project 'gradles'
 +--- project 'ipc'
 +--- project 'kotlinlib'
 +--- project 'lifecycle'
 +--- project 'systrace'
 +--- project 'thirdlib'
 +--- project 'thread'
 +--- project 'view'
 */

// 打印所有的子project
def getAllSubprojects() {
    getSubprojects().each { project ->
        println "---- ${project.name}"
    }
}
// 调用方法
getAllSubprojects()

// 获取根project的名字，在根project中调用返回null。在子project下调用打印出父project的名字
def getParentProjectName() {
    def project = getParent()
    if (project != null) {
        println "父project的名字是: " + project.name
    } else {
        println '没有父project'
    }
}
// 调用方法
getParentProjectName()  // 没有父project

// 获取根project的名字
def getRootPro() {
    println "根project的名字是：" + getRootProject().name
}

getRootPro()  // 根project的名字是：seniorlibs


// 在根project对子project进行配置
project("gradles") { Project project ->
//    apply plugin: 'com.android.application'
//    group 'com.seniorlibs.app'
//    version '1.0.0'
    dependencies {

    }
}

project('gradles') { Project project ->
    dependencies {

    }
}

// 为所有的project进行统一的配置
allprojects {
    repositories {
        google()
        jcenter()
    }

    group 'com.seniorlibs.gradles'
    version '1.0.1'
}
println "gradles工程的group是： ${project('gradles').group}"  // gradles工程的group是： com.seniorlibs.gradles

// 只对子project进行配置
subprojects { Project project ->
    group 'com.seniorlibs.subgradles'
}
println "gradles工程的group是： ${project('gradles').group}"  // gradles工程的group是： com.seniorlibs.subgradles


/************************************ 属性相关api ***************************************/

// common.gradle

// 在gradle.properties中定义
if (hasProperty('isLoadGradles') ? isLoadGradles.toBoolean() : false) {
    println "gradle.properties定义的isLoadGradles：${isLoadGradles.toBoolean()}"
    // gradle.properties定义的isLoadGradles：true
}


/************************************ 文件相关api ***************************************/
// 打印文件路径
println "the root file path is：" + getRootDir().absolute     // the root file path is：true
println "the build file path is：" + getRootDir().absoluteFile   // the build file path is：D:\project\seniorlibs
println "the project file path is：" + getRootDir().absolutePath // the project file path is：D:\project\seniorlibs

// 获取文件内容
//apply from: "common.gradle"
println getContent("common.gradle")

def getContent(String path) {
    // 相对当前的project工程开始查找，如果是new file()需要传入绝对路径
    def file = file(path)
    return file.text
}

// 文件拷贝
//copy {
//    from file("build/outputs/apk/")
//    into getRootProject().getBuildDir().path + "/apk/"
//}

/************************************ 依赖相关api ***************************************/
// Project的方法，接收一个闭包，类型是ScriptHandler
buildscript { ScriptHandler scriptHandler ->

    // 配置工程的仓库地址，接收一个闭包，类型是RepositoryHandler。等于：repositories{}
    scriptHandler.repositories { RepositoryHandler repositoryHandler ->
        // 只是方法
        repositoryHandler.jcenter()
        repositoryHandler.mavenCentral()
        repositoryHandler.mavenLocal()

        // 配置工程的maven仓库地址，接收一个闭包，类型是MavenArtifactRepository
        repositoryHandler.maven { MavenArtifactRepository mavenArtifactRepository ->
            mavenArtifactRepository.name "youku"  // 等于：name("youku")，name "youku"
            mavenArtifactRepository.url "https://localhost:8080/nexus/repositories"
            mavenArtifactRepository.credentials {
                username = "amdin"
                password = "amdin123"
            }
        }

        // 配置多个maven
//        maven {
//
//        }
    }

    // 配置工程的插件依赖地址，等于：dependencies{}
    scriptHandler.dependencies {

        classpath 'com.android.tools.build:gradle:3.2.0'
    }
}

/************************************ Task ***************************************/

/******************************* Task创建和方法执行 *******************************/
// Task创建方式一：直接通过task方法去创建
// Task方法2个参数，第2个闭包：Task task(String name, Closure configureClosure);
task helloTask {
    println 'i am helloTask'  // i am helloTask
}
// 等于
task(helloTask1 {
    println 'i am helloTask1' // i am helloTask1
})
task(helloTask2, {
    println 'i am helloTask2' // i am helloTask2
})
task(helloTask3) { it ->
    println 'i am helloTask3' // i am helloTask3
}

// 以下是对比：1个参数为闭包
// 1个参数：闭包，传入闭包
def clouser = { name ->
    "clouser " + name.call()
}
println clouser { '一个参数' }   // clouser 一个参数
println clouser() { "一个参数" }  // clouser 一个参数
println clouser({ it -> "一个参数" })  // clouser 一个参数
println clouser.call({ it -> "一个参数" })  // clouser 一个参数

// 1个参数：闭包，传入值
def clouserValue = { name ->
    "clouserValue ${name}"
}
println clouserValue('1个参数：闭包，传入值')  // louserValue 1个参数：闭包，传入值
println clouserValue.call('1个参数：闭包，传入值')  // louserValue 1个参数：闭包，传入值

// Task创建方式二： 通过TaskContainer创建Task
this.tasks.create(name: "helloTaskCreate") {
    println 'i am helloTaskCreate' // i am helloTaskCreate
}


// 配置Task：配置分组和描述信息
// 推荐
task helloTaskConfig(group: 'TestTask', description: 'task study') {
    println 'is MyTask'
}

// 通过TaskContainer的create方法
this.tasks.create(name: 'helloTaskConfig2') {
    setGroup('TestTask')
    setDescription('task study')
    println 'is MyTask'
}


// 闭包中执行方法
task helloTasks(group: 'TestTask', description: 'task study') {
    println 'i am helloTasks'  // i am helloTasks
    // 执行的最开始和最后做了一些事情
    doFirst {
        println "doFirst group is：" + description
    }
    doLast {
        println "doLast group is：" + description
    }
}
// 等于
helloTasks.doFirst {
    println "doFirst group is：" + description
}
helloTasks.doLast {
    println "doLast group is：" + description
}
//doFirst group is：task study
//doFirst group is：task study
//doLast group is：task study
//doLast group is：task study

// 计算build执行时长
//def startBuildTime, endBuildTime
// afterEvaluate保证要找的task已经执行完毕
//this.afterEvaluate { Project project ->
//    def preBuildTask = project.tasks.getByName('preBuild')
//    preBuildTask.doFirst {
//        startBuildTime = System.currentTimeMillis()
//        println "startBuildTime: ${startBuildTime}"
//    }
//
//    def buildTask = project.tasks.getByName('build')
//    buildTask.doLast {
//        endBuildTime = System.currentTimeMillis()
//        println "build time is: ${endBuildTime - startBuildTime}"
//    }
//}


/******************* Task添加依赖：把不相关的Task构成一条线执行 ************************/

task taskX {
    doLast {
        println "taskX"
    }
}

task taskY {
    doLast {
        println "taskY"
    }
}

// 静态添加依赖：dependsOn依赖taskX和taskY，执行taskZ会同时执行taskX和taskY
task taskZ(dependsOn: [taskX, taskY]) {
    doLast {
        println "taskZ"
    }
}
// 等于
//taskZ.dependsOn(taskX, taskY)


// doLast还有一个等价的操作leftShift，leftShift还可以缩写为<<，下面的三种实现效果等价：
task lib1 {
    doLast {
        println "lib1"
    }
}
task lib2 << {
    println "lib2"
}
task nolib << {
    println "nolib"
}
// 动态添加依赖：dependsOn依赖lib1和lib2，执行tasklib会同时执行lib1和lib2
task tasklib {
    dependsOn this.tasks.findAll {
        task -> return task.name.startsWith('lib')
    }
    doLast {
        println "tasklib"
    }
}

// 解析xml并把内容写到文件中
task handleReleaseFile {
    def srcFile = file("releases.xml")
//    def destDir = new File(this.buildDir, "generated/release")
    def destDir = new File("D:/project/seniorlibs/", "")
    doLast {
        println "开始解析对应的xml文件"
        destDir.mkdir()
        def releases = new XmlParser().parse(srcFile)
        releases.release.each { releaseNode ->
            // 解析每个release节点的内容
            def name = releaseNode.versionName.text()
            def versionCode = releaseNode.versionCode.text()
            def versionInfo = releaseNode.versionInfo.text()
            // 创建文件并写入节点数据
            def destFile = new File(destDir, "release-${name}.text")
            destFile.withWriter { writer ->
                writer.write("${name} -> ${versionCode} -> ${versionInfo}")
            }
        }
    }
}
// 测试依赖
task handleReleaseFileTest(dependsOn: handleReleaseFile) {
//    def dir = fileTree(this.buildDir.path + "generated/release/")
    def dir = fileTree("D:/project/seniorlibs/" + "")
    doLast {
        dir.each {
            println "file name is：" + it
        }
        println "输出完毕"
    }
}
// 1.1.0 -> 110 -> App的第2个版本，上线了一些最基础核心的功能.









